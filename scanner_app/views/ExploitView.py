import tkinter as tk
from util.ExploitSearch import ExploitSearcher
from models.Exploit import Exploit
from util.PaginationDataModel import PaginationDataModel

from tkinter import ttk

# _id = ""
#     _author = ""
#     _source = ""
#     _platform = ""
#     _date = ""
#     _port = ""
#     _type = ""
#     _description = ""
#     _cve = []

class ExploitView:

    # Properties
    id_var = None
    author_var = None
    source_var = None
    platform_var = None
    date_var = None
    port_var = None
    type_var = None
    description_var = None
    cve_var = None

    pagination_dm = None
    curr_exploit = None

    matches_var = None
    find_button = None
    exploit_data = None
    description_var = None
    prev_button = None
    next_button = None

    def get_view(self, parent_frame):


        self.matches_var = tk.StringVar()

        self.id_var = tk.StringVar()
        self.author_var = tk.StringVar()
        self.source_var = tk.StringVar()
        self.platform_var = tk.StringVar()
        self.date_var = tk.StringVar()
        self.port_var = tk.StringVar()
        self.type_var = tk.StringVar()
        self.description_var = tk.StringVar()
        self.cve_var = tk.StringVar()
        self.pagination_dm = PaginationDataModel([])


        frame = ttk.Frame(parent_frame)
        frame.grid(row=0, column=0, sticky='nsew')
        frame.grid_columnconfigure(0, weight=1)

        label_frame = ttk.Frame(frame)
        label_frame.grid(row=1, column=0, sticky='nsew')

        # header label
        header_label = ttk.Label(label_frame, text='Exlploit Details')
        header_label.grid(row=0, column=0, pady=(8, 8))

        # Exploit Labels
        id_label = ttk.Label(label_frame, textvariable=self.id_var)
        id_label.grid(row=1, column=0, pady=(8, 8))
        self.id_var.set("ID: ")

        author_label = ttk.Label(label_frame, textvariable=self.author_var)
        author_label.grid(row=2, column=0, pady=(8, 8))
        self.author_var.set("Author: ")

        source_label = ttk.Label(label_frame, textvariable=self.source_var)
        source_label.grid(row=3, column=0, pady=(8, 8))
        self.source_var.set("Source: ")

        platform_label = ttk.Label(label_frame, textvariable=self.platform_var)
        platform_label.grid(row=4, column=0, pady=(8, 8))
        self.platform_var.set("Platform: ")

        date_label = ttk.Label(label_frame, textvariable=self.date_var)
        date_label.grid(row=5, column=0, pady=(8, 8))
        self.date_var.set("Date: ")

        port_label = ttk.Label(label_frame, textvariable=self.port_var)
        port_label.grid(row=6, column=0, pady=(8, 8))
        self.port_var.set("Port: ")

        type_label = ttk.Label(label_frame, textvariable=self.type_var)
        type_label.grid(row=7, column=0, pady=(8, 8))
        self.type_var.set("Type: ")

        ## Do something else but a label for CVE
        # cve_label = ttk.Label(label_frame, textvariable=self.cve_var)
        # cve_label.grid(row=8, column=0, pady=(8, 8))
        # self.cve_var.set("CVE: ")

        description_label = ttk.Label(label_frame, textvariable=self.description_var)
        description_label.grid(row=9, column=0, pady=(8, 8))
        self.description_var.set("Description: ")


        # find button
        button_frame = ttk.Frame(frame)
        button_frame.grid(row=2, column=0, pady=(8, 8))

        self.prev_button = ttk.Button(button_frame, text='Prev', command=self.on_prev)
        self.prev_button.grid(row=0, column=0, pady=(8, 8))

        # self.find_button = ttk.Button(button_frame, text='Find Exploit', command=self.on_search)
        # self.find_button.grid(row=0, column=1, pady=(8, 8))

        self.prev_button = ttk.Button(button_frame, text='Next', command=self.on_next)
        self.prev_button.grid(row=0, column=2, pady=(8, 8))

        # # description frame
        # desc_frame = ttk.Frame(frame)
        # desc_frame.grid(row=3, column=0, sticky='nsew')
        #
        # # description label
        # desc_label = ttk.Label(desc_frame, text='Description: ')
        # desc_label.grid(row=0, column=0, sticky='nsew')
        # desc_text = ttk.Label(desc_frame, wraplength=400, textvariable=self.description_var)
        # #desc_text = ttk.Text(desc_frame, wrap='word', width=75, height=17, textvariable=self.description_var)
        # desc_text.grid(row=1, column=0, rowspan=3, columnspan=3, sticky='nsew')
        return frame

    def update_cve(self, cve):
        print('FROM EXPLOIT VIEW: Updating cve label')
        self.cve_var.set(cve)
        # self.on_update_cve(cve)

    def update_curr_exploit(self, exploit):
        print("update the ui for the current exploit values")
        # self.curr_exploit = exploit

        print("EXPLOIT: ", exploit)
        print("ID: ", exploit.get_id())

        self.id_var.set(f'ID: {exploit.get_id()}')
        self.author_var.set(f'Author: {exploit.get_author()}')
        self.source_var.set(f'Source: {exploit.get_source()}')
        self.platform_var.set(f'Platform: {exploit.get_platform()}')
        self.date_var.set(f'Date: {exploit.get_date()}')
        self.port_var.set(f'Port: {exploit.get_port()}')
        self.type_var.set(f'Type: {exploit.get_type()}')
        ## TODO: figure out why description is taking so long
        # self.description_var.set(f'Description: {exploit.get_description()}')
        # self.cve_var.set(exploit.get_cve())

        if self.pagination_dm is None:
            return

        if self.pagination_dm.has_prev_item():
            self.prev_button.state(["!disabled"])
        else:
            self.prev_button.state(["disabled"])

        if self.pagination_dm.has_next_item():
            self.next_button.state(["!disabled"])
        else:
            self.next_button.state(["disabled"])

    # def update_es(self, es):
    #     self.exploit_data = es
    #     res = es.get_results()
    #     self.matches_var.set(res['total'])
    #     es.print_all()

    def on_prev(self):
        if self.pagination_dm is None:
            return

        prev_exploit = self.pagination_dm.prev_item()
        self.update_curr_exploit(prev_exploit)

    def on_next(self):
        if self.pagination_dm is None:
            return

        next_exploit = self.pagination_dm.next_item()
        self.update_curr_exploit(next_exploit)

    def on_search(self):
        if self.cve_var.get():
            es = ExploitSearcher(self.cve_var.get())
            # when clicking in vuln tab this gets called very quickly and throws errors
            es.search()
            # self.matches_var.set(es.get_results()['total'])

            print("")
            print('Exploit buttons works')
            # es.print_all()

            exploits = es.parse_results()
            self.pagination_dm = PaginationDataModel(exploits)
            self.update_curr_exploit(self.pagination_dm.curr_item())

            # self.description_var.set(es.get_results()['matches'][0]['description'])
