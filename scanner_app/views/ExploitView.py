import tkinter as tk
from util.ExploitSearch import ExploitSearcher
from models.Exploit import Exploit
from util.PaginationDataModel import PaginationDataModel
from views.FormView import FormView, FormRow, FormRowType

import enum

from tkinter import ttk

# _id = ""
#     _author = ""
#     _source = ""
#     _platform = ""
#     _date = ""
#     _port = ""
#     _type = ""
#     _description = ""
#     _cve = []

class ExploitView:

    # Properties
    id_var = None
    author_var = None
    source_var = None
    platform_var = None
    date_var = None
    port_var = None
    type_var = None
    description_var = None
    cve_var = None

    # UI Components
    id_text_field = None
    author_text_field = None
    source_text_field = None
    platform_text_field = None
    date_text_field = None
    port_text_field = None
    type_text_field = None
    description_text_field = None
    cve_text_field = None

    pagination_dm = None
    curr_exploit = None

    matches_var = None
    find_button = None
    exploit_data = None
    description_var = None
    prev_button = None
    next_button = None

    form = None

    def get_view(self, parent_frame):
        self.matches_var = tk.StringVar()
        self.id_var = tk.StringVar()
        self.author_var = tk.StringVar()
        self.source_var = tk.StringVar()
        self.platform_var = tk.StringVar()
        self.date_var = tk.StringVar()
        self.port_var = tk.StringVar()
        self.type_var = tk.StringVar()
        self.description_var = tk.StringVar()
        self.cve_var = tk.StringVar()
        self.pagination_dm = PaginationDataModel([])

        frame = ttk.Frame(parent_frame)
        frame.grid(row=0, column=0, sticky='nsew')
        frame.grid_columnconfigure(0, weight=1)

        label_frame = ttk.Frame(frame)
        label_frame.grid(row=0, column=0, sticky='nsew')

        # header label
        header_label = ttk.Label(label_frame, text='Exlploit Details')
        header_label.grid(row=0, column=0, pady=(8, 8), sticky='nsew')

        # Setup button row
        button_row = FormRow(None, None, FormRowType.button)
        button_row.add_button("Prev", self.on_prev)
        button_row.add_button("Next", self.on_next)

        form_frame = ttk.Frame(frame)
        form_frame.grid_columnconfigure(0, weight=1)
        form_frame.grid(row=1, column=0, sticky='nsew')

        rows = [
            FormRow("ID:", self.id_var),
            FormRow("Author:", self.author_var),
            FormRow("Source:", self.source_var),
            FormRow("Platform:", self.platform_var),
            FormRow("Date:", self.date_var),
            FormRow("Port:", self.port_var),
            FormRow("Type:", self.type_var),
            FormRow("CVE:", self.cve_var),
            FormRow("Description:", self.description_var, FormRowType.text),
            button_row
        ]

        self.form = FormView(form_frame, rows)

        return frame

    def update_cve(self, cve):
        print('FROM EXPLOIT VIEW: Updating cve label')
        self.cve_var.set(cve)
        # self.on_update_cve(cve)

    def update_curr_exploit(self, exploit):
        self.id_var.set(f'{exploit.get_id()}')
        self.author_var.set(f'{exploit.get_author()}')
        self.source_var.set(f'{exploit.get_source()}')
        self.platform_var.set(f'{exploit.get_platform()}')
        self.date_var.set(f'{exploit.get_date()}')
        self.port_var.set(f'{exploit.get_port()}')
        self.type_var.set(f'{exploit.get_type()}')
        ## TODO: figure out why description is taking so long
        self.description_var.set(f'{exploit.get_description()}')
        self.form.update()
        # self.cve_var.set(exploit.get_cve())

    def on_prev(self):
        if self.pagination_dm is None:
            return

        prev_exploit = self.pagination_dm.prev_item()
        self.update_curr_exploit(prev_exploit)

    def on_next(self):
        if self.pagination_dm is None:
            return

        next_exploit = self.pagination_dm.next_item()
        self.update_curr_exploit(next_exploit)

    def on_search(self):
        if self.cve_var.get():
            es = ExploitSearcher(self.cve_var.get())
            # when clicking in vuln tab this gets called very quickly and throws errors
            es.search()

            exploits = es.parse_results()
            self.pagination_dm = PaginationDataModel(exploits)
            self.update_curr_exploit(self.pagination_dm.curr_item())

            # self.description_var.set(es.get_results()['matches'][0]['description'])