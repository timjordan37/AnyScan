import shodan
from models.Exploit import Exploit

API_KEY = 'OyiLN1i5O5zjVMUlxQJcT9ok8Fk3Mx2R'
# https://developer.shodan.io/api/exploit-specification


class ExploitSearcher:
    """This class uses Shodan API exploit search capabilities in order to search for exploits found within given
    vulnerabilities.  Exploits found are sorted by selected CVE of given vulnerabilities, and the exploit descriptions
    are displayed via the 'Exploits' tab within the application.

    ExploitSearcher class wraps Shodan api exploit search capabilities"""

    # Vulnerabilities to find exploits for
    _vuln = ''
    _results = {}

    def __init__(self, vuln):
        self._vuln = vuln

    def search(self):
        """Search for exploits using the Shodan api with this object's given
        vulnerability

        :return number of exploits found
        :raises ExSearchError if there is shodan api issues, probably
        """
        try:
            searcher = shodan.Shodan(API_KEY).exploits
            self._results = searcher.search(self._vuln)
            return self._results['total']

        except shodan.APIError as e:
            # Pass error up to caller to handle
            raise ExSearchError(e)

    def get_description(self):
        """Get description of exploit

        :return exploit description of exploit
        :raises ExSearchError if no description available
        """
        descr_dict = []
        if self._results:
            for item in self._results['matches']:
                descr_dict.append(item['description'])
            return descr_dict
        else:
            raise ExSearchError("Error: No results exist.")

    def print_all(self):
        """Print all exploits found

        :raises ExSearchError if no results available
        """
        if self._results:
            print(self._results)
        else:
            raise ExSearchError("Error: No results exist.")

    def total(self):
        """Returns the total number of exploits found

        :return total exploits found
        :raises ExSearchError if no results available
        """
        if self._results:
            return self._results['total']
        else:
            raise ExSearchError("Error: No results exist.")

    def get_osvdb(self):
        """Compile the Open Source Vulnerability Database ids for all found exploits

        :return list of Open Source Vulnerability Database IDs for found exploits
        :raises ExSearchError if no results available
        """
        ids = []
        if self._results:
            for item in self._results['matches']:
                for id in item['osvdb']:
                    ids.append(id)
                return ids
        else:
            raise ExSearchError("Error: No results exist.")

    def get_results(self):
        """Returns full dictionary of exploits found

        :return dictionary of found exploits
        :raises ExSearchError if no results available
        """
        if self._results:
            return self._results
        else:
            raise ExSearchError("Error: No results exist.")

    def parse_results(self):
        """Returns array of found exploits

        :return: array of Exploit objs
        """
        exploits = []
        for item in self._results["matches"]:
            new_exploit = Exploit(item)
            new_exploit.print_info()
            exploits.append(new_exploit)

        return exploits


class ExSearchError(Exception):
    """Raised when ExploitSearcher encounters an error to be handled"""
    pass
