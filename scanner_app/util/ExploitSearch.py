import shodan

API_KEY = 'OyiLN1i5O5zjVMUlxQJcT9ok8Fk3Mx2R'


class ExploitSearcher:
    """ExploitSearcher class wraps Shodan api exploit search capabilities"""

    # Vulnerabilities to find exploits for
    _vuln = ''
    _results = {}

    def __init__(self, vuln):
        self._vuln = vuln

    def search(self):
        """Search for exploits using the Shodan api with this object's given
        vulnerability

        :return number of exploits found
        """
        try:
            searcher = shodan.Shodan(API_KEY).exploits
            self._results = searcher.search(self._vuln)
            return self._results['total']

        except shodan.APIError as e:
            # Pass error up to caller to handle
            raise ExSearchError(e)

    def get_description(self):
        descr_dict = []
        if self._results:
            for item in self._results['matches']:
                descr_dict.append(item['description'])
            return descr_dict
        else:
            raise ExSearchError("Error: No results exist.")

    def print_all(self):
        if self._results:
            print(self._results)
        else:
            raise ExSearchError("Error: No results exist.")

    def total(self):
        if self._results:
            return self._results['total']
        else:
            raise ExSearchError("Error: No results exist.")

    def get_osvdb(self):
        """Compile the Open Source Vulnerability Database ids for all found exploits

        :return: list of Open Source Vulnerability Database IDs for found exploits
        """
        ids = []
        if self._results:
            for item in self._results['matches']:
                for id in item['osvdb']:
                    ids.append(id)
                return ids
        else:
            raise ExSearchError("Error: No results exist.")


class ExSearchError(Exception):
    """Raised when ExploitSearcher encounters an error to be handled"""
    pass
